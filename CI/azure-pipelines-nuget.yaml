---
trigger:
  branches:
    exclude: ['*']
  tags:
    include: ['*']

pool:
  vmImage: 'ubuntu-latest'

pr:
  autoCancel: 'true'
  branches:
    exclude:
      - 'trunk'
      - 'feature/*'

variables:
  protoBufFile: 'protoc-3.6.1-linux-x86_64.zip'
  protoBufEnvPath:  '$(system.defaultWorkingDirectory)/protoc'
  protobufWGet: 'https://github.com/protocolbuffers/protobuf/releases/download/v3.6.1/protoc-3.6.1-linux-x86_64.zip'
  tagVersion: $[replace(variables['Build.SourceBranchName'], 'v', '')]

steps:
  - task: UseDotNet@2
    displayName: 'Use .NET Core sdk'
    inputs:
      packageType: sdk
      version: 3.x
  - task: DotNetCoreCLI@2
    displayName: 'dotnet Restore'
    inputs:
      command: 'restore'
      projects: 'Emif.Adapter.Schema.csproj'
  - bash: |
     wget $(protobufWGet)
     unzip $(protoBufFile) -d $(protoBufEnvPath)
     export PATH=$PATH:$(protoBufEnvPath)/bin
     protoc ./protobuf/emif/adapter/schema/*.proto --csharp_out=Emif/Adapter/Schema --proto_path=./protobuf
    displayName: 'Get protoc and generate C# files'
  - task: DotNetCoreCLI@2
    displayName: 'build'
    inputs:
      command: 'build'

  - task: DotNetCoreCLI@2
    displayName: "dotnet pack"
    inputs:
      command: pack
      packagesToPack: Emif.Adapter.Schema.csproj
      versioningScheme: byEnvVar
      versionEnvVar: 'tagVersion'

  - task: NuGetCommand@2
    displayName: "Publish NuGet package"
    inputs:
      command: push
      packagesToPush: "$(Build.ArtifactStagingDirectory)/*.nupkg"
      nuGetFeedType: external
      publishFeedCredentials: NuGetLibs